generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String  @unique
  githubId    Int?    @unique
  password    String?
  image       String?
  demoAccount Boolean @default(false)

  profiles        MemberProfile[] @relation("member")
  tickets         Ticket[]        @relation("ticket_reporter")
  assignedTickets Ticket[]        @relation("ticket_assignee")
  comments        Comment[]       @relation("comment")
  notifications   Notification[]  @relation("notification")
}

model Project {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?

  members MemberProfile[] @relation("member")
  tickets Ticket[]        @relation("ticket")
}

model MemberProfile {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  projectId String  @db.ObjectId
  role      String?
  isAdmin   Boolean @default(false)

  user    User    @relation("member", fields: [userId], references: [id])
  project Project @relation("member", fields: [projectId], references: [id])
}

model Ticket {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  status       TicketStatus @default(open)
  dateReported DateTime     @default(now())
  dateResolved DateTime?
  reporterId   String       @db.ObjectId
  assigneeId   String?      @db.ObjectId
  projectId    String       @db.ObjectId

  reporter User      @relation("ticket_reporter", fields: [reporterId], references: [id])
  assignee User?     @relation("ticket_assignee", fields: [assigneeId], references: [id])
  project  Project   @relation("ticket", fields: [projectId], references: [id])
  comments Comment[] @relation("comment")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  content   String
  userId    String   @db.ObjectId
  ticketId  String   @db.ObjectId

  user   User   @relation("comment", fields: [userId], references: [id])
  ticket Ticket @relation("comment", fields: [ticketId], references: [id])
}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  type       NotificationType
  resourceId String?          @db.ObjectId
  read       Boolean          @default(false)
  timestamp  DateTime         @default(now())

  user User @relation("notification", fields: [userId], references: [id])
}

enum TicketStatus {
  open
  closed
}

enum NotificationType {
  project_add
  ticket_assign
  ticket_comment
}
