// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  sessions Session[]
  accounts Account[]

  profiles MemberProfile[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String    @id @map("_id")
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model Project {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  isArchived  Boolean @default(false)

  members MemberProfile[]
  tickets Ticket[]
}

model MemberProfile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  isAdmin  Boolean @default(false)
  isActive Boolean @default(true)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id])

  tickets         Ticket[] @relation("reporter")
  assignedTickets Ticket[] @relation("assignee")
}

model Ticket {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  reportDate  DateTime     @default(now())
  status      TicketStatus @default(open)

  reporterId String        @db.ObjectId
  reporter   MemberProfile @relation("reporter", fields: [reporterId], references: [id])

  assigneeId String?        @db.ObjectId
  assignee   MemberProfile? @relation("assignee", fields: [assigneeId], references: [id])

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id])
}

enum TicketStatus {
  open
  closed
}
